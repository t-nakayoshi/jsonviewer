#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Mon Aug 21 16:19:49 2023
#
"""JSONファイル整形・表示ツール（GUI版）"""

import argparse
import configparser
import logging
import logging.handlers
import os
import subprocess
import sys

import wx
from wx.adv import AboutBox, AboutDialogInfo, Sound

import jsonviewer as jv
from jsonviewer_gui import MainFrame, MenuID
from myutils.util import platform_info
from res import app_icon, sound

logger = logging.getLogger(__name__)

__version__ = "1.2.0"
__author__ = "UJRC(Takayoshi Tagawa)"

_app_name_ = "JsonViewerGUI"

# 実行ファイルパス
_EXE_PATH = ""
# 設定ファイルパス
_CONFIG_FILE = "JsonViewer.ini"
# ヘルプファイル
_HELP_FILE = "doc/manual.html"


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class JsonViewer(MainFrame):
    """アプリケーションメインフレーム
    wxPythonのFrameクラスを継承したアプリケーションのメインウィンドウ

    Attributes:
        _file_name (str): 読み込んだJSONファイル名
        _platform_info (list): 動作環境情報

    """

    INDENT_IDs = (
        MenuID.OPTION_INDENT0,
        MenuID.OPTION_INDENT2,
        MenuID.OPTION_INDENT4,
        MenuID.OPTION_INDENT8,
    )
    # 入力ファイル種別フィルタ
    FILE_FILTER = "JSON file (*.json)|*.json|All files (*.*)|*.*"

    def __init__(self, *args, **kwds):
        super().__init__(*args, **kwds)
        self.SetSize(wx.Size(800, 600))
        self.tc_result.SetFont(
            wx.Font(
                12,
                wx.FONTFAMILY_MODERN,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL,
                False,
                "MS Gothic",
            )
        )
        # 初期処理
        self.initialize()

    def initialize(self):
        """初期処理

        Args:
            none

        Returns:
            none
        """
        global _app_name_
        global _RESRC_PATH
        # 動作環境情報取得
        self._platform_info = platform_info()
        # Load Application ICON
        self._app_icons = wx.IconBundle(
            app_icon.get_app_icon_stream(),  # type: ignore
            wx.BITMAP_TYPE_ICO,
        )
        self.SetIcon(self._app_icons.GetIcon(wx.Size(16, 16)))
        self.SetTitle(_app_name_)
        # Menuの初期状態を設定
        self.frame_menubar.Enable(MenuID.FILE_SAVE, False)
        self.frame_menubar.Check(MenuID.OPTION_INDENT0, False)
        self.frame_menubar.Check(MenuID.OPTION_INDENT2, False)
        self.frame_menubar.Check(MenuID.OPTION_INDENT4, True)
        self.frame_menubar.Check(MenuID.OPTION_INDENT8, False)
        self.frame_menubar.Check(MenuID.OPTION_SORT, False)
        self.frame_menubar.Check(MenuID.OPTION_ASCII, False)
        # Drag & Drop 設定
        self.nb_1.SetDropTarget(FileDropTarget(self))
        # BEEP
        self._beep = Sound()
        self._beep.CreateFromData(sound.get_snd_beep_bytearray())
        self._success = Sound()
        self._success.CreateFromData(sound.get_snd_success_bytearray())
        # Attributeの初期設定
        self._file_name = ""
        # 設定ファイルの読込みと展開
        self.load_config()

    def load_config(self):
        """設定値読込み処理
        Windowのサイズ、位置など、前回の各種設定値を読込む。

        Args:
            none

        Returns:
            none
        """
        global _CONFIG_FILE
        # 初期値を設定
        self.Config = configparser.ConfigParser()
        self.Config.add_section("system")
        self.Config.add_section("settings")
        self.Config.set("system", "remember_window_pos", str(False))
        self.get_window_state()
        self.get_settings()
        # 設定ファイルの読み込み
        if os.path.exists(_CONFIG_FILE):
            try:
                with open(_CONFIG_FILE, "r") as f:
                    self.Config.read_file(f)
            except OSError as e:
                wx.MessageBox(
                    f"Configration file load failed.\n ({e})\n Use default settings.",
                    "ERROR",
                    wx.ICON_ERROR,
                )
            except configparser.Error as e:
                wx.MessageBox(f"Parse failed.\n ({e})", "ERROR", wx.ICON_ERROR)
        else:
            wx.MessageBox(
                "Configration file not found.\nCreate default configuration file.",
                "Attension",
                wx.ICON_EXCLAMATION,
            )
            self.save_config()
        # 設定を反映
        self.set_window_state()
        self.set_settings()

    def save_config(self):
        """設定値保存処理
        現在の各種設定値を保存する。

        Args:
            none

        Returns:
            none
        """
        global _CONFIG_FILE
        try:
            # 設定をファイルに保存
            with open(_CONFIG_FILE, "w") as fc:
                self.Config.write(fc)

        except OSError as e:
            wx.MessageBox(
                f"Configration file save failed.\n ({e})", "ERROR", wx.ICON_ERROR
            )

    def get_window_state(self):
        """Window状態取得処理
        現在のWindow状態を取得する。

        Args:
            none

        Returns:
            none
        """
        # Window位置、サイズの取得
        self.Config.set("system", "pos_x", str(self.GetScreenPosition()[0]))
        self.Config.set("system", "pos_y", str(self.GetScreenPosition()[1]))
        self.Config.set("system", "size_w", str(self.GetSize()[0]))
        self.Config.set("system", "size_h", str(self.GetSize()[1]))
        self.Config.set(
            "system", "stay_on_top", str((self.GetWindowStyle() & wx.STAY_ON_TOP) != 0)
        )

    def set_window_state(self):
        """Window状態反映処理
        設定ファイルから読み込んだ各種設定値を反映する。

        Args:
            none

        Returns:
            none
        """
        # 位置
        remember_window_pos = self.Config.getboolean(
            "system", "remember_window_pos", fallback=False
        )
        self.frame_menubar.Check(MenuID.OPTION_WINDOW_POS, remember_window_pos)
        if remember_window_pos:
            pos_x = self.Config.getint("system", "pos_x", fallback=0)
            pos_y = self.Config.getint("system", "pos_y", fallback=0)
            self.SetPosition(wx.Point(pos_x, pos_y))
            size_w = self.Config.getint("system", "size_w", fallback=-1)
            size_h = self.Config.getint("system", "size_h", fallback=-1)
            if (size_w > 0) and (size_h > 0):
                self.SetSize(wx.Size(size_w, size_h))
        else:
            self.Centre()
        # Stay on Top
        stay_on_top = self.Config.getboolean("system", "stay_on_top", fallback=False)
        self.frame_menubar.Check(MenuID.OPTION_STAY_ON_TOP, stay_on_top)
        if stay_on_top:
            self.SetWindowStyle(self.GetWindowStyle() | wx.STAY_ON_TOP)
        else:
            self.SetWindowStyle(self.GetWindowStyle() & ~wx.STAY_ON_TOP)

    def get_indent_from_menu(self) -> int:
        """Indent文字数取得処理
        Indentを（メニューから）取得する

        Args:
            none

        Returns:
            indent (int)
        """
        indent = jv.OPT_INDENT_DEFAULT
        for id in self.INDENT_IDs:
            if self.frame_menubar.IsChecked(id):
                indent = id % 10

        return indent

    def set_indent_to_menu(self, indent: int):
        """Indent文字数設定処理
        Indentを（メニューに）設定する

        Args:
            none

        Returns:
            none
        """
        for id in self.INDENT_IDs:
            if indent == id % 10:
                self.frame_menubar.Check(id, True)
            else:
                self.frame_menubar.Check(id, False)

    def get_settings(self):
        """設定値取得処理
        分割設定値を取得する。

        Args:
            none

        Returns:
            none
        """
        self.Config.set("settings", "indent", str(self.get_indent_from_menu()))
        self.Config.set(
            "settings",
            "sort",
            str(self.frame_menubar.IsChecked(MenuID.OPTION_SORT)),
        )
        self.Config.set(
            "settings",
            "ensure_ascii",
            str(self.frame_menubar.IsChecked(MenuID.OPTION_ASCII)),
        )
        self.Config.set(
            "settings",
            "without_cofirmation",
            str(self.frame_menubar.IsChecked(MenuID.OPTION_CONFIRM)),
        )

    def set_settings(self):
        """設定値反映処理
        設定ファイルから読み込んだ分割設定値を反映する。

        Args:
            none

        Returns:
            none
        """
        self.set_indent_to_menu(
            self.Config.getint("settings", "indent", fallback=jv.OPT_INDENT_DEFAULT)
        )
        self.frame_menubar.Check(
            MenuID.OPTION_SORT,
            self.Config.getboolean("settings", "sort", fallback=False),
        )
        self.frame_menubar.Check(
            MenuID.OPTION_ASCII,
            self.Config.getboolean("settings", "ensure_ascii", fallback=False),
        )

    def show_formated_json(self, filename: str) -> bool:
        """JSONファイル整形・表示処理
        JSONファイルを整形・表示する

        Args:
            filename (str): JSONファイル名

        Returns:
            結果(bool): True=成功
        """
        result = False
        json_str = jv.json_view(
            filename,
            self.Config.getint("settings", "indent", fallback=jv.OPT_INDENT_DEFAULT),
            self.Config.getboolean("settings", "sort", fallback=False),
            self.Config.getboolean("settings", "ensure_ascii", fallback=False),
        )
        # 整形済みJSON文字列を表示
        if len(json_str):
            self._file_name = filename
            self.tc_result.SetValue(json_str)
            self.frame_menubar.Enable(MenuID.FILE_SAVE, True)
            self._success.Play()
            result = True
        else:
            self._file_name = ""
            self.frame_menubar.Enable(MenuID.FILE_SAVE, False)
            self._beep.Play()

        return result

    def on_open_file(self, event):  # wxGlade: MainFrame.<event_handler>
        """OPENメニューイベントハンドラ
        選択したJSONファイルを整形して表示する。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        # Fileダイアログを生成する
        result = False
        with wx.FileDialog(
            None,
            "Select a JSON file to OPEN.",
            wildcard=self.FILE_FILTER,
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
        ) as dlg:
            if dlg.ShowModal() == wx.ID_OK:
                # 選択ファイルを取得
                self._file_name = dlg.GetPath()
                result = True

        # 選択したJSONファイルを整形する
        if result:
            self.show_formated_json(self._file_name)

        event.Skip()

    def on_save_file(self, event):  # wxGlade: MainFrame.<event_handler>
        """SAVEメニューイベントハンドラ
        整形済みJSONファイルを保存する。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        default_name = os.path.basename(self._file_name).replace(
            ".json", "_formatted.json"
        )
        # Fileダイアログを生成する
        result = False
        with wx.FileDialog(
            None,
            "Select a file name to SAVE.",
            wildcard=self.FILE_FILTER,
            style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT,
        ) as dlg:
            dlg.SetFilename(default_name)
            if dlg.ShowModal() == wx.ID_OK:
                # 選択したJSONファイルを整形する
                self._file_name = dlg.GetPath()
                result = self.tc_result.SaveFile(self._file_name)

        if result:
            self.frame_statusbar.SetStatusText(f"Save to {self._file_name}.", 0)
        else:
            self._beep.Play()
            self.frame_statusbar.SetStatusText("[ERROR] Save failed.", 0)

        event.Skip()

    def on_exit(self, event):  # wxGlade: MainFrame.<event_handler>
        """Exitボタンイベントハンドラ
        アプリケーションを終了する。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        result = wx.YES
        if not self.Config.getboolean(
            "settings", "without_cofirmation", fallback=False
        ):
            result = wx.MessageBox(
                "Are you sure you want to exit?",
                "Confirm",
                wx.YES_NO | wx.ICON_EXCLAMATION | wx.NO_DEFAULT,
            )

        if result == wx.YES:
            # Window状態、設定状態を取得する
            self.get_window_state()
            self.get_settings()
            # 設定ファイルに保存
            self.save_config()
            self.Destroy()

        event.Skip()

    def on_set_indent_columns(self, event):  # wxGlade: MainFrame.<event_handler>
        """Indent文字数切り替え処理
        Indent文字数を切り替える。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        indent_new = event.GetId() % 10
        # 同じ場合は切り替えない
        if indent_new != self.Config.getint(
            "settings", "indent", fallback=jv.OPT_INDENT_DEFAULT
        ):
            logger.debug(f"Set Indent to {indent_new} columns.")
            self.Config.set("settings", "indent", str(indent_new))
            self.set_indent_to_menu(indent_new)

        event.Skip()

    def on_set_sort_mode(self, event):  # wxGlade: MainFrame.<event_handler>
        """ソートモード切り替え処理
        ソートモードを切り替える。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        flag = self.frame_menubar.IsChecked(MenuID.OPTION_SORT)
        self.Config.set("settings", "sort", str(flag))
        logger.debug(f"Sort mode is {flag}.")
        event.Skip()

    def on_set_ensure_ascii(self, event):  # wxGlade: MainFrame.<event_handler>
        """UNICODEエスケープモード切り替え処理
        UNICODEエスケープモードを切り替える。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        flag = self.frame_menubar.IsChecked(MenuID.OPTION_ASCII)
        self.Config.set("settings", "ensure_ascii", str(flag))
        logger.debug(f"Unicode escape is {flag}.")
        event.Skip()

    def on_set_stay_on_top(self, event):  # wxGlade: MainFrame.<event_handler>
        """Window最上位固定処理
        アプリケーションWindowの最上位固定を切り替える。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        flag = self.frame_menubar.IsChecked(MenuID.OPTION_STAY_ON_TOP)
        if flag:
            self.SetWindowStyle(self.GetWindowStyle() | wx.STAY_ON_TOP)
        else:
            self.SetWindowStyle(self.GetWindowStyle() & ~wx.STAY_ON_TOP)

        self.Config.set("system", "stay_on_top", str(flag))
        logger.debug(f"Stay on top is {flag}.")
        event.Skip()

    def on_set_window_pos(self, event):  # wxGlade: MainFrame.<event_handler>
        """Window位置保持ボタンイベントハンドラ
        アプリケーション終了時のウィンドウの位置を記憶するモードにする。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        flag = self.frame_menubar.IsChecked(MenuID.OPTION_WINDOW_POS)
        if not flag:
            self.Centre()

        self.Config.set("system", "remember_window_pos", str(flag))
        logger.debug(f"Stay on top is {flag}.")
        event.Skip()

    def on_without_confirm(self, event):  # wxGlade: MainFrame.<event_handler>
        """終了時確認モード切り替え処理
        アプリケーション終了時の確認ダイアログの有無を設定する。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        flag = self.frame_menubar.IsChecked(MenuID.OPTION_CONFIRM)
        self.Config.set("settings", "without_cofirmation", str(flag))
        logger.debug(f"Confirmation mode is {flag}.")
        event.Skip()

    def on_help(self, event):  # wxGlade: MainFrame.<event_handler>
        """Helpメニューイベントハンドラ
        HELPファイル(html)をデフォルトブラウザで開く。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none
        """
        global _HELP_FILE
        if os.path.exists(_HELP_FILE):
            subprocess.Popen(["start", _HELP_FILE], shell=True)
        else:
            wx.MessageBox(f"{_HELP_FILE} is not found!", "ERROR", wx.ICON_ERROR)

        event.Skip()

    def on_about(self, event):  # wxGlade: MainFrame.<event_handler>
        """Aboutメニューイベントハンドラ
        アプリケーションのバージョン情報などを表示する。

        Args:
            event (wx.EVENT): EVENTオブジェクト

        Returns:
            none

        """
        global __version__
        global __author__
        info = AboutDialogInfo()
        info.SetIcon(self._app_icons.GetIcon(wx.Size(128, 128)))
        info.SetName(_app_name_)
        info.SetVersion(
            f"\nVer.{__version__} on Python {self._platform_info[2]} and wxPython {wx.__version__}."
        )
        info.SetCopyright(f"Copyright (C) 2023, {__author__}. All right reserved.")
        info.SetDescription("JSON formatting viewer. (EXE conversion by Nuitka.)")
        info.SetLicense("MIT License.")
        # info.SetWebSite("")
        info.AddDeveloper(__author__)
        # 表示
        AboutBox(info)
        event.Skip()


# end of class MainFrame


class FileDropTarget(wx.FileDropTarget):
    """Drag & Dropクラス
    ファイルリストにDropされたファイル名をリストに追加する。
    ディレクトリ名の場合は、再帰的に検索して追加する。

    Attributes:
        None

    """

    def __init__(self, window):
        """コンストラクタ

        Args:
            window (:obj:class): 親Windows

        Attributes:
            window: 親Windows
        """
        wx.FileDropTarget.__init__(self)
        self.window = window

    def OnDropFiles(self, x, y, files):
        """Dropイベントハンドラ
        DropされたJSONファイルを整形・表示する。

        Args:
            x, y (int): Drop座標
            files (list): Dropしたファイル名のリスト

        Returns:
            int: 結果（0固定）
        """
        if len(files) > 1:
            wx.MessageBox(
                "Too many files.\nPlease make it one.", "ERROR", wx.ICON_ERROR
            )
        else:
            self.window.show_formated_json(files[0])

        return 0


def app_init():
    """初期化処理
    アプリケーションの初期化を行う

    Args:
        none

    Returns:
        none
    """
    global _EXE_PATH
    global _CONFIG_FILE
    global _HELP_FILE
    global _RESRC_PATH
    global _NO_CONSOLE
    global debug_mode

    # コマンドラインパラメータ解析（デバッグオプションのみ）
    parser = argparse.ArgumentParser(description="JSON file formatting viewer.")
    parser.add_argument("--debug", action="store_true", help="Debug mode.")
    # 解析結果
    args = parser.parse_args()

    debug_mode = args.debug

    log_level = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(level=log_level)
    handler = logging.handlers.RotatingFileHandler(
        filename=f"{_app_name_}.log",
        maxBytes=1048576,
        backupCount=3,
        encoding="utf-8",
    )
    logger.addHandler(handler)

    # 実行ファイルPATH
    _EXE_PATH = os.path.dirname(sys.argv[0])
    _EXE_PATH = "." + os.sep if len(_EXE_PATH) == 0 else _EXE_PATH
    # 設定ファイル、HELPファイルは実行ファイル（スクリプト）ディレクトリ下
    _CONFIG_FILE = os.path.join(_EXE_PATH, _CONFIG_FILE)
    _HELP_FILE = os.path.join(_EXE_PATH, _HELP_FILE)


class JsonViewerApp(wx.App):
    def OnInit(self):
        self.frame = JsonViewer(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class JsonViewerApp

if __name__ == "__main__":
    # 初期化
    app_init()

    logger.info("=== Start ===")

    app = JsonViewerApp()
    app.MainLoop()

    logger.info("=== Finish ===")
